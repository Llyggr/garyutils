local termLength,termHeight = term.getSize()

function padString (stringInput,desLen,dir)
    -- error handling
    if dir == nil then dir = "l" end
    if stringInput == nil then error("Must supply garyutils.padString() with a string to pad") end
    if desLen == nil then error("Must supply garyutils.padString() with a 2nd argument, designating the length of the padded string") end

    -- adds the required number of spaces on either the left or right of the string
    if string.len(stringInput) < tonumber(desLen) then
        for i = 1,tonumber(desLen) - string.len(stringInput),1 do
            if dir == "l" or dir == "L" then
                stringInput = " "..stringInput
            elseif dir == "r" or dir == "R" then
                stringInput = stringInput.." "
            else
                error("third argument must be 'r' or 'l' to designate which direction it will be padded (left and right)")
            end
        end
    end

    return stringInput
end


function printCentered (stringInput,offset)
    if offset == nil then offset = 0 end
    local x,y = term.getCursorPos()

    term.setCursorPos(math.ceil(termLength/2) - string.len(stringInput)/2 + offset + 1,y)
    print(stringInput)
end


function writeCentered (stringInput,offset)
    if offset == nil then offset = 0 end
    local x,y = term.getCursorPos()

    term.setCursorPos(math.ceil(termLength/2) - string.len(stringInput)/2 + offset + 1,y)
    write(stringInput)
end


function combineTableElements (inputTable,sepChar)
    local tempString = ""
    local tempTable = {}

    for i,v in ipairs(inputTable) do
        tempString = ""

        -- if both the first and last characters of the string are equal to the seperation character, add it to the tempTable
        if string.sub(v,1,1) == sepChar and string.sub(v, string.len(v), string.len(v)) == sepChar then
            table.insert(tempTable, string.sub(v,2,-2))
        --[[
            if the first character is equal to the seperation character but not the last, loop over 
            each consecutive item in the table, combining tempString and that item, until finding one 
            with that character at the end. Then, insert the string into the table.
        ]]
        elseif string.sub(v,1,1) == sepChar then
            local i2 = i

            while string.sub(inputTable[i2],string.len(inputTable[i2]),string.len(inputTable[i2])) ~= sepChar do
                tempString = tempString..inputTable[i2]
                i2 = i2 + 1
            end
            tempString = tempString..inputTable[i2]

            table.insert(tempTable,string.sub(tempString,2,-2))
        end
    end

    --return the table generated by the function
    return tempTable
end
